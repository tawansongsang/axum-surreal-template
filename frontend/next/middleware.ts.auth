import NextAuth from "next-auth";

import authConfig from "@/auth.config";
import {
	DEFAULT_LOGIN_REDIRECT,
	apiAuthPrefix,
	authRoutes,
	publicRoutes,
} from "@/routes";
import { NextResponse } from "next/server";

const { auth } = NextAuth(authConfig);

export default auth((req) => {
	const { nextUrl } = req;
	const isLoggedIn = !!req.auth;
	// console.log("ROUTE: ", nextUrl);
	// console.log("IS LOGGEDIN: ", isLoggedIn);
	let cookies = req.cookies.getAll();
	console.log(cookies)
	const res = NextResponse.next()
	res.cookies.set({
		name: 'vercel',
		value: 'fast',
		path: '/',
		httpOnly: true,
		sameSite: "lax",
	});

	const isApiAuthRoute = nextUrl.pathname.startsWith(apiAuthPrefix);
	const isPublicRoute = publicRoutes.includes(nextUrl.pathname);
	const isAuthRoute = authRoutes.includes(nextUrl.pathname);

	if (isApiAuthRoute) {
		return res;
	}

	if (isAuthRoute) {
		if (isLoggedIn) {
			return Response.redirect(new URL(DEFAULT_LOGIN_REDIRECT, nextUrl));
		}
		return res;
	}

	if (!isLoggedIn && !isPublicRoute) {
		return Response.redirect(new URL("/auth/login", nextUrl));
	}

	return res;
})

// Optionally, don't invoke Middleware on some paths
export const config = {
	// matcher: ["/((?!api|_next/static|_next/image|favicon.ico).*)"],
	// matcher: ["/auth/login", "/auth/register"],
	matcher: ["/((?!.+\\.[\\w]+$|_next).*)", "/", "/(api|trpc)(.*)"],
}
